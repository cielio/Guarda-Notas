/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.cielio.guardanotas.visualizacao;

import br.com.cielio.guardanotas.controle.ControladorNota;
import br.com.cielio.guardanotas.modelo.Nota;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author kohoutek
 */
public class FormPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
        listarNotas();
        //Adiciona o evento ao jTextFieldBusca para manipula o campo busca
        addEventoTextChange();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuConteudo = new javax.swing.JPopupMenu();
        jMenuItemCopiar = new javax.swing.JMenuItem();
        jMenuItemColar = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPaneJListTitulo = new javax.swing.JScrollPane();
        jListTitulo = new javax.swing.JList();
        jScrollPaneJTextPane = new javax.swing.JScrollPane();
        jTextPaneConteudo = new javax.swing.JTextPane();
        jTextFieldTitulo = new javax.swing.JTextField();
        jButtonAdiciona = new javax.swing.JButton();
        jButtonDeleta = new javax.swing.JButton();
        jButtonSalva = new javax.swing.JButton();
        jTextFieldBusca = new javax.swing.JTextField();
        jButtonEditar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jMenuItemCopiar.setText("Copiar");
        jMenuItemCopiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemCopiarMouseReleased(evt);
            }
        });
        jPopupMenuConteudo.add(jMenuItemCopiar);

        jMenuItemColar.setText("Colar");
        jMenuItemColar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemColarMouseReleased(evt);
            }
        });
        jPopupMenuConteudo.add(jMenuItemColar);

        jPopupMenuConteudo.getAccessibleContext().setAccessibleParent(jTextPaneConteudo);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Guarda Notas");
        setBackground(new java.awt.Color(153, 204, 255));

        jScrollPaneJListTitulo.setMaximumSize(new java.awt.Dimension(500, 600));
        jScrollPaneJListTitulo.setMinimumSize(new java.awt.Dimension(50, 400));
        jScrollPaneJListTitulo.setPreferredSize(new java.awt.Dimension(200, 600));

        jListTitulo.setBackground(new java.awt.Color(248, 248, 248));
        jListTitulo.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jListTitulo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListTitulo.setAutoscrolls(false);
        jListTitulo.setMaximumSize(new java.awt.Dimension(3000, 30000));
        jListTitulo.setMinimumSize(new java.awt.Dimension(100, 100));
        jListTitulo.setPreferredSize(new java.awt.Dimension(150, 10));
        jListTitulo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTituloMouseClicked(evt);
            }
        });
        jScrollPaneJListTitulo.setViewportView(jListTitulo);

        jSplitPane1.setLeftComponent(jScrollPaneJListTitulo);

        jTextPaneConteudo.setEditable(false);
        jTextPaneConteudo.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jTextPaneConteudo.setPreferredSize(new java.awt.Dimension(6, 400));
        jTextPaneConteudo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextPaneConteudoMouseReleased(evt);
            }
        });
        jScrollPaneJTextPane.setViewportView(jTextPaneConteudo);

        jSplitPane1.setRightComponent(jScrollPaneJTextPane);

        jTextFieldTitulo.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jTextFieldTitulo.setForeground(java.awt.Color.lightGray);
        jTextFieldTitulo.setText("Título da Nota.");
        jTextFieldTitulo.setToolTipText("Digite aqui o Título da Nota.");
        jTextFieldTitulo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldTituloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldTituloFocusLost(evt);
            }
        });

        jButtonAdiciona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/5_content_new.png"))); // NOI18N
        jButtonAdiciona.setToolTipText("Adicionar nota.");
        jButtonAdiciona.setEnabled(false);
        jButtonAdiciona.setPreferredSize(new java.awt.Dimension(33, 33));
        jButtonAdiciona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdicionaActionPerformed(evt);
            }
        });

        jButtonDeleta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/5_content_remove.png"))); // NOI18N
        jButtonDeleta.setToolTipText("Excluir nota.");
        jButtonDeleta.setEnabled(false);
        jButtonDeleta.setMaximumSize(new java.awt.Dimension(33, 33));
        jButtonDeleta.setMinimumSize(new java.awt.Dimension(33, 33));
        jButtonDeleta.setPreferredSize(new java.awt.Dimension(33, 33));
        jButtonDeleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletaActionPerformed(evt);
            }
        });

        jButtonSalva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/5_content_save.png"))); // NOI18N
        jButtonSalva.setToolTipText("Salvar alterações.");
        jButtonSalva.setEnabled(false);
        jButtonSalva.setMaximumSize(new java.awt.Dimension(33, 33));
        jButtonSalva.setMinimumSize(new java.awt.Dimension(33, 33));
        jButtonSalva.setPreferredSize(new java.awt.Dimension(33, 33));
        jButtonSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvaActionPerformed(evt);
            }
        });

        jTextFieldBusca.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jTextFieldBusca.setToolTipText("Pesquisar");

        jButtonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/5_content_edit1.png"))); // NOI18N
        jButtonEditar.setToolTipText("Editar nota selecionada.");
        jButtonEditar.setEnabled(false);
        jButtonEditar.setMaximumSize(new java.awt.Dimension(33, 33));
        jButtonEditar.setMinimumSize(new java.awt.Dimension(33, 33));
        jButtonEditar.setPreferredSize(new java.awt.Dimension(33, 33));
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/2_action_search.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(33, 33));
        jLabel1.setMinimumSize(new java.awt.Dimension(33, 33));
        jLabel1.setPreferredSize(new java.awt.Dimension(33, 33));
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAdiciona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSalva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDeleta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButtonDeleta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSalva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAdiciona, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldTitulo)
                        .addComponent(jTextFieldBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAdicionaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdicionaActionPerformed
        adicionarNota();
        jTextPaneConteudo.setEditable(false);
    }//GEN-LAST:event_jButtonAdicionaActionPerformed

    private void jListTituloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTituloMouseClicked
        getItemSelecionado();
    }//GEN-LAST:event_jListTituloMouseClicked

    private void jButtonDeletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletaActionPerformed

        int resposta = JOptionPane.showConfirmDialog(null, "Excluir a nota selecionada?", "Excluir", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        // verifica se o usuário clicou no botão YES
        if (resposta == JOptionPane.YES_OPTION) {
            
            excluirItemSelecionado();
        }

        jButtonEditar.setEnabled(true);
        jButtonSalva.setEnabled(false);
        jTextPaneConteudo.setEditable(false);
    }//GEN-LAST:event_jButtonDeletaActionPerformed

    private void jButtonSalvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvaActionPerformed
        atualizarItemSelecionado();

        jButtonEditar.setEnabled(true);
        jButtonSalva.setEnabled(false);
        
        jTextPaneConteudo.setEditable(false);
    }//GEN-LAST:event_jButtonSalvaActionPerformed

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        getItemSelecionado();

        jButtonEditar.setEnabled(false);
        jButtonSalva.setEnabled(true);
        jTextPaneConteudo.setEditable(true);

    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jTextFieldTituloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTituloFocusGained

        jButtonEditar.setEnabled(false);
        jButtonDeleta.setEnabled(false);
        
        
        jTextFieldTitulo.setForeground(Color.black);
        if (jTextFieldTitulo.getText().equals("Título da Nota.")) {
            jTextFieldTitulo.setText("");       
        }
        
        if (jTextFieldTitulo.getText().trim().isEmpty()) {
            jTextPaneConteudo.setText("");
        }


    }//GEN-LAST:event_jTextFieldTituloFocusGained

    private void jTextFieldTituloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTituloFocusLost

        if (jTextFieldTitulo.getText().trim().isEmpty()) {
            jTextFieldTitulo.setText("Título da Nota.");
            jTextFieldTitulo.setForeground(Color.lightGray);
        }
    }//GEN-LAST:event_jTextFieldTituloFocusLost

    private void jTextPaneConteudoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextPaneConteudoMouseReleased

        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable contents = clipboard.getContents(this);
        //Liga ou desliga o botao colar, se caso estiver texto na area de trasferencia ou se estiver vazio
        if (contents == null | !contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            jMenuItemColar.setEnabled(false);
        } else {
            jMenuItemColar.setEnabled(true);
        }
        //Liga ou desliga o botao copiar, se caso estiver texto selecionado
        if (jTextPaneConteudo.getSelectedText() != null) {
            jMenuItemCopiar.setEnabled(true);
        } else {
            jMenuItemCopiar.setEnabled(false);
        }

        //Ativa o menu copiar e colar
        if (evt.isPopupTrigger()) {
            jPopupMenuConteudo.show(jTextPaneConteudo, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextPaneConteudoMouseReleased

    private void jMenuItemCopiarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemCopiarMouseReleased
        jTextPaneConteudo.copy();
    }//GEN-LAST:event_jMenuItemCopiarMouseReleased

    private void jMenuItemColarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemColarMouseReleased

        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable contents = clipboard.getContents(this);
        if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            jTextPaneConteudo.paste();
        }

    }//GEN-LAST:event_jMenuItemColarMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdiciona;
    private javax.swing.JButton jButtonDeleta;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonSalva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jListTitulo;
    private javax.swing.JMenuItem jMenuItemColar;
    private javax.swing.JMenuItem jMenuItemCopiar;
    private javax.swing.JPopupMenu jPopupMenuConteudo;
    private javax.swing.JScrollPane jScrollPaneJListTitulo;
    private javax.swing.JScrollPane jScrollPaneJTextPane;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextFieldBusca;
    private javax.swing.JTextField jTextFieldTitulo;
    private javax.swing.JTextPane jTextPaneConteudo;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("UseOfObsoleteCollectionType")
    private void listarNotas() {
        ControladorNota controladorNota = new ControladorNota();

        jListTitulo.setListData(new Vector(controladorNota.listar()));

        jListTitulo.setPreferredSize(new java.awt.Dimension(150, (controladorNota.listar().size() * 21)));
    }

    @SuppressWarnings("UseOfObsoleteCollectionType")
    private void listarNotas(String str) {
        ControladorNota controladorNota = new ControladorNota();

        jListTitulo.setListData(new Vector(controladorNota.listar(str)));

        jListTitulo.setPreferredSize(new java.awt.Dimension(150, (controladorNota.listar().size() * 21)));
    }

    private void addEventoTextChange() {

        // Listen para mudanças no jTextFieldBusca
        jTextFieldBusca.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                // texto foi alterado
                listarNotas(jTextFieldBusca.getText());
            }

            public void removeUpdate(DocumentEvent e) {
                // texto foi deletado
                listarNotas(jTextFieldBusca.getText());
            }

            public void insertUpdate(DocumentEvent e) {
                // texto foi inserido
                listarNotas(jTextFieldBusca.getText());
            }
        });

        // Listen para mudanças no jTextFieldTitulo
        jTextFieldTitulo.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                // texto foi alterado
                enableBtnAdicionar();
            }

            public void removeUpdate(DocumentEvent e) {
                // texto foi deletado
                enableBtnAdicionar();
            }

            public void insertUpdate(DocumentEvent e) {
                // texto foi inserido
                enableBtnAdicionar();
            }
        });
    }

    private void enableBtnAdicionar() {
        if (jTextFieldTitulo.getText().trim().isEmpty()
                | jTextFieldTitulo.getText().equals("Título da Nota.")) {

            jButtonAdiciona.setEnabled(false);
        } else {
            jButtonAdiciona.setEnabled(true);
            jTextPaneConteudo.setEditable(true);
        }
    }

    private void adicionarNota() {
        ControladorNota controladorNota = new ControladorNota();

        Nota nota = new Nota();

        Date date = new Date();
        date.getTime();

        nota.setTitulo(jTextFieldTitulo.getText());
        nota.setConteudo(jTextPaneConteudo.getText());
        nota.setData(date);

        controladorNota.adicionar(nota);

        jTextFieldTitulo.setText("");
        jTextPaneConteudo.setEditable(true);

        listarNotas();

        jListTitulo.setSelectedIndex(0);

        getItemSelecionado();
    }

    private void getItemSelecionado() {

        if (jListTitulo.getSelectedIndex() > -1) {

            Nota nota = (Nota) jListTitulo.getSelectedValue();
            jTextPaneConteudo.setText(nota.getConteudo());
            jTextPaneConteudo.setCaretPosition(0);

            jButtonEditar.setEnabled(true);
            jButtonAdiciona.setEnabled(false);
            jButtonSalva.setEnabled(false);
            jButtonDeleta.setEnabled(true);
            jTextPaneConteudo.setEditable(false);

        }
    }

    private void excluirItemSelecionado() {

        if (jListTitulo.getSelectedIndex() > -1) {

            ControladorNota controladorNota = new ControladorNota();

            Nota nota = (Nota) jListTitulo.getSelectedValue();

            controladorNota.excluir(nota.getId());

            listarNotas();

            jTextPaneConteudo.setText("");

        }
    }

    private void atualizarItemSelecionado() {

        if (jListTitulo.getSelectedIndex() > -1) {

            ControladorNota controladorNota = new ControladorNota();

            int tempIndex = jListTitulo.getSelectedIndex();

            Nota nota = (Nota) jListTitulo.getSelectedValue();
            nota.setConteudo(jTextPaneConteudo.getText());

            controladorNota.atualizar(nota);

            listarNotas();
            jListTitulo.setSelectedIndex(tempIndex);
            getItemSelecionado();

        }
    }
}
